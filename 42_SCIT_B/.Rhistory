# 0. shortcut(단축키)
# 실행 : ctal + enter
10+10
# 1. 도움말 ------
help(base)
?names()
#2. 내장함수 ----
search()
read.csv("aaa.csv")
# 3. 외장 기능 (패키지, 함수) ----
install.packages("ggplot2")
library(ggplot2)
search()
# 4. 모든 내용은 변수로 처리 ----
aa <- read.csv("aaa.csv")
aa
install.packages("dplyr")
library(dplyr)
search()
data(package = "ggplot2")
mpg
mpg
library(ggplot2)
search()
mpg
?mpg
search()
# 패키지 내리는 법법
detach("package:ggplot2")
search()
library(ggplot2)
# 패키지 내리는 법법
detach("package:ggplot2")
library(ggplot2)
search()
?mpg
# 7 . 워크 디렉토리 wd 확인----
getwd()
# 8 . 버전 확인 ----
R.version
RStudio.Version()
a <- "남정욱"
b <- "문주현"
c <- "이승범"
d <- "이민국"
e <- "배창현"
a;b;c;d;e;
class(a)
ls()
aa;
# 10. 변수 삭제 ----
rm(a)
ls()
rm(list=ls())
ls()
search()
mpg
class(mpg)
dim(mpg)
head(mpg)
#뒤에서 6행(줄)을 읽어보는것이다.
tail(mpg)
length(mpg)
length(mpg$cty)
mode(mpg)
# mode(mpg) 모드 보다는 typeof(mpg) 가 좋다.
typeof(mpg)
search()
# mode(mpg) 모드 보다는 typeof(mpg) 가 좋다.
# 범주형 data type 에는 levels(mpg) 를 사용한다 ----
names(mpg) # 컬럼명 return
#str(mpg)
str(mpg)
summary(mpg)
rownames(mpg)
View(mpg)
1 %in% mpg
1 %in% mpg$year
2008 %in% mpg$year
search()
# 12-2. 메모리에서 pkg 내리기
detach(ggplot2)
# 12-2. 메모리에서 pkg 내리기
detach("package:ggplot2")
search()
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
#12-3. 특정 pkg(패키지) 내의 dts 확인
data(package = "ggplot2")
data(package = "dplyr")
?mpg
detach("package:ggplot2", unload = TRUE)
?mpg
??mpg
library(ggplot2)
?economics
economics
# cdhlmnstrV
cdhlmnstrV
# cdhlmnstrV
?cdhlmnstrV
# cdhlmnstrV
??cdhlmnstrV
# cdhlmnstrV
class(economics)
str(economics)
View(economics)
dim(economics)
head(cdhlmnstrV)
head(economics)
tail(economics)
# cdhlmnstrV
class(economics)
length(economics)
#12-6. 제조사별 평균-hwy(연비)
?mpg
View(mpg)
#중복 데이터 빼고 보는방법
unique(mpg$manufacturer)
#SQL : select .. gf(그룹함수) from ... group by ..
mpg %>%
group_by(manufacturer) %>%
summarise(mean(hwy))
#SQL : select .. gf(그룹함수) from ... group by ..
mpg %>%
group_by(manufacturer) %>%
summarise(a=mean(hwy)) %>%
arrange(-a)
#SQL : select .. gf(그룹함수) from ... group by ..
mpg %>%
group_by(manufacturer) %>%
summarise(a=mean(hwy)) %>%
arrange(-a) %>% head(2)
mpg %>%
filter(manufacturer == "ford") %>%
group_by(manufacturer) %>%
summarise(a=mean(hwy)) %>%
arrange(-a)
# 12-7. ford 사의 모델별 평균 -hwy
# SQL> select .. gt() from .. where .. group by
names(mpg)
mpg %>%
filter(manufacturer == "ford") %>%
group_by(manufacturer, model) %>%
summarise(a=mean(hwy)) %>%
arrange(-a)
?qplot()
names(mpg)
qplot(data=mpg, x = displ, y = cty)
qplot(data=mpg, x = displ, y = cty, col=displ)
names(mpg)
qplot(data=mpg, x = displ, y = cyl)
# x 축과 y축을 표시해준다.
qplot(data=mpg, x = displ, y = cty)
# 12-9. USA economics
data(package = "ggplot2")
names(economics)
?economics
# 월별 개인 소비 동향
?ggplot()
ggplot(data = economics,
aes(x=date, y=pce))
ggplot(data = economics,
aes(x=date, y=pce)) + geom_line()
# 월별 개인 저축 동향
ggplot(data = economics,
aes(x=date, y=psavert)) + geom_line()
#lm()
?lm()
lm(data = mpg, hwy~displ)
summary(lm.mpg)
summary(lm.mpg)
lm.mpg <- lm(data = mpg, hwy~displ)
summary(lm.mpg)
names(mpg)
lm.mpg <- lm(data = mpg, hwy~displ_drv) #y= x1+ x2 라는 의미다.
summary(lm.mpg)
lm.mpg2 <- lm(data = mpg, hwy~displ_drv) #y= x1+ x2 라는 의미다.
lm.mpg2 <- lm(data = mpg, hwy~displ+drv) #y= x1+ x2 라는 의미다.
summary(lm.mpg)
names(mpg)
lm(data = mpg, hwy~displ)
lm.mpg <- lm(data = mpg, hwy~displ) #y= x1+ x2 라는 의미다.
summary(lm.mpg)
lm(data = mpg, hwy~displ+drv)
lm.mpg2 <- lm(data = mpg, hwy~displ+drv) #y= x1+ x2 라는 의미다.
summary(lm.mpg)
names(mpg)
summary(lm.mpg2)
lm(data = mpg, hwy~displ+drv+year+cyl+fl+class)
lm.mpg2 <- lm(data = mpg, hwy~displ+drv+year+cyl+fl+class) #y= x1+ x2 + x3 + x4 + x5 + x6 라는 의미다.
summary(lm.mpg2)
lm(data = mpg, hwy~displ+drv)
lm.mpg2 <- lm(data = mpg, hwy~displ+drv) #y= x1+ x2 라는 의미다.
summary(lm.mpg2)
names(mpg)
lm(data = mpg, hwy~displ+drv+year+cyl+fl+class)
lm.mpg3 <- lm(data = mpg, hwy~displ+drv+year+cyl+fl+class) #y= x1+ x2 + x3 + x4 + x5 + x6 라는 의미다.
summary(lm.mpg3)
names(mpg)
install.packages("rvest")
library(rvest)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
search()
url
url="https://search.naver.com/search.naver?where=news&sm=tab_jum&query=%EB%B6%81%ED%95%9C"
url
text <- read_html(url, encoding = "UTF-8")
text
class(text)
text %>%
html_nodes(xpath='//*[@class="list_news"]')
text
text %>%
html_nodes(xpath='//*[@class="list_news"]')-> news_list
news_list
#
news_list %>%
html_children()
#
news_list %>%
html_children() %>%
html_nodes(xpath='//*[@class="news_tit"]')
#
news_list %>%
html_children() %>%
html_nodes(xpath='//*[@class="news_tit"]') %>%
html_text()
#데이터를 긁어와서 볼수있다.
news_list %>%
html_children() %>%
html_nodes(xpath='//*[@class="news_tit"]') %>%
html_text() -> news_title
news_title
#복 소수(실수 + 허수)
1
2i
1+2i
aa<-1+2i
aa
class(aa)
#0. work directory ----
### 1) 현재 work directory에서
getwd()
#강흥석.csv
read.csv(강흥석.csv)
#강흥석.csv
read.csv("강흥석.csv")
#이승범.csv
read.csv("이승범.csv")
#이승범.csv
read.csv("dts/이승범.csv")
read.csv("./dts/이승범.csv")
setwd()
setwd()
#0. work directory ----
# . :  current wd  (커런트 워트디렉토리)
# .. : parents wd (페어런트 워크디렉토리)
### 1) 현재 work directory에서
#워크디렉토리 확인
getwd()
# 2) wd changed
setwd("E:/PR/R_Works/42_SCIT_B/dts")
#0. work directory ----
# . :  current wd  (커런트 워트디렉토리)
# .. : parents wd (페어런트 워크디렉토리)
### 1) 현재 work directory에서
#워크디렉토리 확인
getwd()
#폴더 내부에 있는경우 csv파일 읽는법
read.csv("이승범.csv")
#메인 작업폴더에 있는csv찾는법
read.csv("../강흥석.csv")
setwd("E:/PR/R_Works/42_SCIT_B")
getwd()
a <- 2
a <- 2;a
aa <- 5^20;aa
AA <- 10;AA
class(a)
class(aa)
class(AA)
a+aa
a*aa
### 2) 여러 개의 변수값 할당 (c()) ----
# c() = 여러개의 변수를 묶어주는 역활
?c()
bbb <- c(10,20,30,40,50)
bbb
length(bbb)
bbb
ccc <-c(100:120)
ccc
ccc <-c(100:120);ccc
bbb <- c(10,20,30,40,50);length(bbb);bbb
?seq()
# seq(from, to, by=+-num, length.out) 파라미터가 존재
ccc2 <- seq(100, 150, by=5);ccc
# seq(from, to, by=+-num, length.out) 파라미터가 존재
ccc2 <- seq(100, 150, by=5);ccc2
# 하나의 값을 여러 변수에 할당
aa <- bb <- cc <- dd <- 100
aa
bb
aa;bb;cc;dd;
### 3) 연속값 계산하기 ----
dd <- seq(10,100, by=10);dd
### 3) 연속값 계산하기 ----
dd <- seq(10,100, by=10);dd;length(dd)
ee <- seq(100, by=-5);ee;length(ee)
### 3) 연속값 계산하기 ----
dd <- seq(10,100, by=10);dd;length(dd)
ee <- seq(100, by=-5);ee;length(ee)
#콘솔 값 지우기 ctrl + l 누르면 된다.
dd+ee
# Q
d1 <- c(1:10)
d2 <- c(1:3)
d1 + d2
d1
d2
# Q
d1 <- c(1:10);d1
d2 <- c(1:3);d2
# Q
d1 <- c(1:10);d1;length(d1)
d2 <- c(1:3);d2;length(d2)
d1+d2
d2 <- c(1:5);d2;length(d2)
#길이가 너무 맞지 않아서 더할수가 없다.
d1+d2
d2 <- c(1:4);d2;length(d2)
#길이가 너무 맞지 않아서 더할수가 없다.
d1+d2
d2 <- c(1:3);d2;length(d2)
#길이가 너무 맞지 않아서 더할수가 없다.
d1+d2
h1 <- "aaa";h1;length(h1)
h2 <- "Hello R Programming~";h2;length(h2)
h3 <- c("Hello","R", "Programming~");h3;length(h3)
h1 + h2
h1 + h3
h3 + h2
h1+3
### 5) 반복문자 변수 생성 (rep()) ----
?rep()
r1 <- rep(1,5)
r1 <- rep(1,5);r1
r2 <- rep(1:5,3);r2
rep(1:5, each=3);rep
rep(1:5, each=3) -> r3; r3
rep(1:5, each=3)
length(rep(1:5, each=3))
rep(1:5, each=3,length.out)
rep(1:5, each=3,length.out=100)
rep(1:5)
rep(1:5,each=2)
rep(1:5,each=2,times=3)
rep(1:5,each=2,times=3,length.out=100)
#중복된 데이터를 제외하고 읽는법
# 합집합 교집합 차집합을 의미한다.
#합집합 a 와 b 를 합친 전부
#교집합 a 와 b 의 중복된값만
#차집합
### 6) 집합(set,중복된 데이터는 제외)----
set1 <- seq(10,100,by=2);set1
set2 <- seq(30,150,by=4);set2
length(set1)
length(set2)
#합집합
u_set <- union(set1, set2);u_set
length(u_set)
#교집합
i_set <- intersect(set1, set2);i_set
length(i_set)
#차집합
setdiff(set1,set2)-> sd1;sd1
setdiff(set2,set1)-> sd2;sd2
#차집합
setdiff(set1,set2)-> sd1;sd1
setdiff(set2,set1)-> sd2;sd2
length(sd2)
length(sd1)
#set 비교
setequal(set1, set2)
setequal(c(1,3,5),c(1,1,1,5,5,3,3,3,3,1,5)
setequal(c(1,3,5), c(1,1,1,5,5,3,3,3,3,1,5))
setequal(c(1,3,5), c(1,1,1,5,5,3,3,3,3,1,5))
#is.element()  %in%, in   in연산자
is.element(9,set1)
is.element(10,set1)
is.element(1,c(1,2,3))
is.element(5,c(1,2,3))
#dts 준비
?sample()
sample(1:100, 3)
sample(0.00001:100, 3)
sample(0.00001:100.00000, 3)
sample(0.00001:100.00000, 3)
sample(0.00001:100.00000, 1)
sample(0.00001:100.00000, 1)
sample(1:100, 10)
#NA (결측치)
a
a <-sample(1:100, 10)
#NA (결측치)
a
# () 함수 [] 데이터셋
a[]
# () 함수 [] 데이터셋
a[7]
a[c(4,7,10)]
#순서 바꾸고 싶은경우
a[c(4,7,10)] <- NA
a
### 7-1) sort()
a
### 7-1) sort()
a
sort(a)
sort(a, decreasing = T)
#NA표기
sort(a,na.last = T)
sort(a,na.last = F)
### 7-1) sort() 오름차순(낮은값부터 큰숫자로) NA는 무시한다.
a;length(a)
length(sort(a))
# 7-2) order()
a
sort(a)
order(a)
?order()
# 7-2) order() ----
a
order(a)
sort(a)
# 역정렬
a
sort(a, decreasing = F)
sort(a, decreasing = T)
sort(a, decreasing = F)
sort(a, decreasing = T)
order(-a)
# 7-2) order() ----
#정렬된 데이터를 기준으로 원자료의 index (위치값)를 리턴
a
sort(a, decreasing = T)
order(-a)
#NA
a
order(a, na.last = T)
order(a, na.last = F)
order(a, na.last = NA) #NA제거거
# Q
r1 <- c(1,5)
# Q
r1 <- c(1,5);r1
r2 <- c(1:5,3);r2
r2 <- rep(1:5,3);r2
# Q
r1 <- c(1,5);r1
r2 <- rep(1:5,3);r2
sort(r1)
sort(r2)
r2(order(r2))
r2[order(r2)]
order(r2)
r2
order(r2)
r2
sort(r2)
order(r2)
paste(order(r2))
paste(order(r2),collapse = ",")
c(1,6,11,2,7,12,3,8,13,4,9,14,5,10,15)
r2[c(1,6,11,2,7,12,3,8,13,4,9,14,5,10,15)]
sort(r2)
r2[order(r2)]
